# name: Deploy to JFrog

# on:
#   push:
#     branches:
#       - main # Change this to your default branch

# jobs:
#   package_versioning:
#     name: NPM Package Bump Up
#     runs-on: ubuntu-latest
#     timeout-minutes: 1

#     permissions:
#       actions: read
#       contents: write

#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
     
#       - name: Clean Package Name
#         id: clean_package_name
#         run: |
#           git config user.name "abhishek karia"
#           git config user.email "abhishek.karia.007@gmail.com"

#           LATEST_TAG=$(git describe --tags --abbrev=0)
#           echo "Latest tag: $LATEST_TAG"
 
#           CURRENT_VERSION="${LATEST_TAG//v/}"
#           echo "Current version: $CURRENT_VERSION"

#           latest_commit_message=$(git log -1 --pretty=%B)
#           echo "$latest_commit_message"
 
#           case "$latest_commit_message" in
#             *major*)
#               echo "major Release"
#               VERSION_BUMP="major"
#              ;;
#             *minor*)
#               echo "minor Release"
#              VERSION_BUMP="minor"
#               ;;
#             *)
#               echo "patch release"
#               VERSION_BUMP="patch"
#               ;;
#           esac
         
#           echo "Version bump type: $VERSION_BUMP"
#           npm version $VERSION_BUMP -m "Bump version to %s"

#           # Fetch remote branches and ensure you're on the right branch
#           git fetch origin
#           git checkout $BRANCH_NAME

#           BRANCH_NAME=${GITHUB_REF##*/}
#           echo "Branch name is $BRANCH_NAME"

#           git add ./package.json
#           git commit -m "Bump version to ${{ steps.bump-version.outputs.newTag }}"
#           git push origin $BRANCH_NAME

#           NEW_VERSION=$(node -p -e "require('./package.json').version")
#           echo "New version: $NEW_VERSION"

#           # Create a tag and push it to the remote
#           echo "Creating tag: $NEW_VERSION"
#           git tag -a "$NEW_VERSION" -m "Bump version to $NEW_VERSION"
#           git push origin $NEW_VERSION

#       # - name: Bump version
#       #   run: |
#       #     git config user.name "abhishek karia"
#       #     git config user.email "abhishek.karia.007@gmail.com"

#       #     # Use npm version to bump the version based on the determined type
#       #     echo ${{ env.VERSION_BUMP }}
#       #     npm version ${{ env.VERSION_BUMP }} -m "Bump version to %s"

#       #     NEW_VERSION=$(node -p -e "require('./package.json').version")
#       #     echo "New version: $NEW_VERSION"

#       #     # Extract only the version number (assuming vX.Y.Z format)
#       #     # VERSION_NUMBER=${env.VERSION_BUMP##*/}
#       #     echo "Creating tag: $NEW_VERSION"

#       #     git tag -a "$NEW_VERSION" -m "Bump version to $NEW_VERSION"
#       #     git push origin $NEW_VERSION

#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#         with:
#           fetch-depth: 0

#       - name: Check Latest Version
#         run: |
#           echo $(git describe --tags --abbrev=0)

#       - name: Set up Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '14' # Specify your Node.js version

#       - name: Install dependencies
#         run: npm install

#       # - name: Configure NPM for JFrog
#       #   run: |
#       #     npm config set registry ${{ secrets.JFROG_REPO }}
#       #     npm config set ${{ secrets.JFROG_URL }}:_authToken=${{ secrets.JFROG_API_KEY }}
#       #     npm publish --access public # Adjust access level if necessary

#       # - name: Publish to JFrog
#       #   env:
#       #     NODE_AUTH_TOKEN: ${{ secrets.JFROG_API_KEY }}
#       #   run: |
#       #     npm publish --access public # Adjust access level if necessary


# name: Print Latest Tag

# on:
#   push:
#     branches:
#       - main

# jobs:
#   print-latest-tag:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Print Latest Tag
#         run: |
#           git fetch --all --tags
#           echo "Latest tag: $(git describe --tags --abbrev=0)"

# name: NPM Package Bump Up and Tag

# on:
#   push:
#     branches:
#       - main

# jobs:
#   bump-and-tag:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
      
#     steps:
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Bump version and tag
#         run: |
#           git config user.name "abhishek karia"
#           git config user.email "abhishek.karia.007@gmail.com"

#           npm version patch -m "Bump version to %s"
#           NEW_VERSION=$(node -p -e "require('./package.json').version")
#           echo "NEW_VERSION: $NEW_VERSION"
#           git tag -a "$NEW_VERSION" -m "Bump vers2ion to $NEW_VERSION"
#           git push origin $NEW_VERSION --follow-tags


################### last running ####################
name: Bump Patch Version and Push

on:
  push:
    branches:
      - main  # Trigger on pushes to the 'main' branch

jobs:
  bump_version:
    name: Bump Patch Version
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push changes to the repository

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # Checkout the repository

      - name: Set up Node.js
        uses: actions/setup-node@v3  # Set up Node.js (to use npm)
        with:
          node-version: '16'  # Specify your Node.js version here

      - name: Set Git Config
        run: |

          git config user.name "abhishek karia"
          git config user.email "abhishek.karia.007@gmail.com"

      - name: Bump Patch Version
        with:
          fetch-depth: 0
        run: |

          # Bump the version (patch) in package.json
          # echo "cmd op ==> $(npm version patch -m "Bump version to %s" | grep 'v' | cut -d' ' -f3)"
          # NEW_VERSION="$(npm version patch -m "Bump version to %s" | grep 'v' | cut -d' ' -f3)"  # Get the new version number
          # NEW_VERSION="v2.0.7"  # Get the new version number
          NEW_VERSION=$(npm version patch -m "Bump version to %s")

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV  # Save the new version to the environment variable

          echo "New version is $NEW_VERSION"  #   Output new version for debugging

          BRANCH_NAME=${GITHUB_REF##*/}
          echo "Branch name is $BRANCH_NAME"
          git push origin $BRANCH_NAME

      # - name: Push Changes to Repository
      #   run: |

      #     # Push the updated package.json file to the repository
      #     git push origin main  # Push the changes to the main branch

      # - name: Fetch Tags from Remote
      #   run: |

      #     # Fetch all remote tags to ensure we have the latest tag list
      #     git fetch --tags --prune

      # - name: Check if Tag Exists
      #   run: |

      #     # Check if the tag already exists in the remote repository
      #     if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
      #       echo "Tag $NEW_VERSION already exists. Skipping tag creation."
      #       exit 0  # Exit the workflow if the tag already exists
      #     else
      #       echo "Tag $NEW_VERSION does not exist. Proceeding with tag creation."
      #     fi

      - name: Create and Push Git Tag
        run: |

          # Define the version number or dynamically calculate it
          # VERSION="v2.0.6"  # You can set this dynamically based on your needs

          # echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Create the tag
          git tag -a "$NEW_VERSION" -m "Release version $NEW_VERSION"

      - name: Push Tag to Remote
        run: |

          # Push the created tag to the remote repository
          git push origin "$NEW_VERSION"





#################### only tag creation and update ################
# name: Create and Push Git Tag

# on:
#   push:
#     branches:
#       - main  # Trigger on pushes to the 'main' branch

# jobs:
#   create_tag:
#     name: Create Git Tag and Push
#     runs-on: ubuntu-latest  # Use the latest Ubuntu runner
#     permissions:
#       contents: write  # Required to push changes to the repository
    
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3  # Checkout the repository

#       - name: Set Git Config
#         run: |
#           git config user.name "abhishek karia"
#           git config user.email "abhishek.karia.007@gmail.com"

#       - name: Create Git Tag
#         run: |

#           # Define the version number or dynamically calculate it
#           VERSION="v2.0.0"  # You can set this dynamically based on your needs

#           echo "VERSION=$VERSION" >> $GITHUB_ENV

#           # Create the tag
#           git tag -a "$VERSION" -m "Release version $VERSION"

#       - name: Push Tag to Remote
#         run: |
#           # Push the created tag to the remote repository
#           git push origin "$VERSION"
